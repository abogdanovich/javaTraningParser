/**
 * this script helps us to generate a new 
 * JSystem xml files
 * @author bogdanovich_a
 */
package xmlGenerator;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;
import java.util.UUID;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import static java.util.Arrays.asList;

/**
 * @author bogdanovich_a
 *
 */
public class Main {
	String uuidStep = "";
	String uuidTestCase = "";
    String packagePath = "";
    String folderPath = "";
	String actionName = "";
	ArrayList<String> actionList = new ArrayList<String>();
	ArrayList<String> paramList = new ArrayList<String>();
	static final Logger log = LogManager.getLogger(Main.class);
	static final String XML_FOOTER = "</project>";
	static final String XML_HEADER =
			"<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--This file was auto-generated by Aliaksandr Bahdanovich auto-gen script for JSystem runner, " +
			"do not change it manually--><project default=\"execute scenario\" name=\"scenarios/SMP/Quality_Gates/Gate4/TODO_CHANGE_PATH_NAME\">\r\n" +
			"\t<property name=\"test.parameters.file.name\" value=\".testPropertiesFile_Empty\"/>\r\n" +
			"\t<property name=\"scenario.version\" value=\"JSystem5_1\"/>\r\n" +
			"\t<property name=\"jsystem.uuid\" value=\"\"/>\r\n" +
			"\t<property name=\"jsystem.parent.uuid\" value=\"\"/>\r\n" +
			"\t<property name=\"jsystem.parent.name\" value=\"\"/>\r\n" +
			"\t<loadproperties srcFile=\"${test.parameters.file.name}\"/>\r\n" +
			"\t<taskdef classname=\"com.aqua.anttask.jsystem.JSystemTask\" name=\"jsystem\"/>\r\n" +
			"\t<taskdef classname=\"com.aqua.anttask.jsystem.JSystemAntTask\" name=\"jsystem-ant\"/>\r\n" +
			"\t<taskdef resource=\"net/sf/antcontrib/antlib.xml\"/>\r\n" +
			"\t<typedef classname=\"com.aqua.anttask.jsystem.JSystemScriptCondition\" name=\"jsystemscriptcondition\"/>\r\n" +
			"\t<taskdef classname=\"com.aqua.anttask.jsystem.JSystemSwitch\" name=\"jsystemswitch\"/>\r\n" +
			"\t<taskdef classname=\"com.aqua.anttask.jsystem.JSystemForTask\" name=\"jsystemfor\"/>\r\n" +
			"\t<taskdef classname=\"com.aqua.anttask.jsystem.JSystemDataDrivenTask\" name=\"jsystemdatadriven\"/>\r\n" +
			"\t<taskdef classname=\"com.aqua.anttask.jsystem.JSystemSetAntProperties\" name=\"jsystemsetantproperties\"/>\r\n" +
			"\t<target name=\"execute scenario\">\n";


    /**
     * Method that takes package path from <preferences.xml> KB file
     * @param node
     * @param actionName
     * @throws Exception
     */
    public void getPackageName(Node node, String actionName) throws Exception {
        NodeList list = node.getChildNodes();

        for (int i = 0; i < list.getLength(); i++) {
            Node childNode = list.item(i);
            String nodeText = childNode.getTextContent();
            String nodeName = childNode.getNodeName();
            if (childNode.getNodeType() == Node.ELEMENT_NODE) {

                switch (nodeName) {
                    case "class":
                        if (nodeText.equals(actionName)) {
                            // FIXME: make algorithm more reliable without hardcode for xml levels
                            if (!childNode.getParentNode().getParentNode().getParentNode().getNodeName().equals("layout")) {
                                folderPath += childNode.getParentNode().getParentNode().getParentNode().getNodeName() + "/";
                            }

                            if (!childNode.getParentNode().getParentNode().getNodeName().equals("layout")) {
                                folderPath += childNode.getParentNode().getParentNode().getNodeName() + "/";
                            }

                            if (!childNode.getParentNode().getNodeName().equals("layout")) {
                                folderPath += childNode.getParentNode().getNodeName() + "/";
                            }
                            folderPath = folderPath.replace("#document/", "");
                            break;
                        }
                }
                getPackageName(childNode, actionName);
            }
        }
    }

    /**
	 * generate action file with appropriate data
	 * @param filePath
	 * @param fileName
	 * @param actionsWithUUID
	 * @param scenarioWithActions
	 * true: to generate scenario JSystem xml file
	 * false: to generate scenario JSystem xml file with references to another xml files
	 * @throws IOException
	 */
	public void generateJSystemScenario(String filePath, String fileName, ArrayList<ArrayList<String>> actionsWithUUID, boolean scenarioWithActions) throws IOException {
		// xml file header
		String data = XML_HEADER;

		// steps ordering
		for (int i = 0; i < actionsWithUUID.size(); i++) {
			data += String.format("\t\t<antcallback target=\"t%s\"/>\r\n", i);
		}
		 
		data += "\t</target>\r\n";

		/*
		 * step description
		 * actionsWithUUID.get(i).get(0) = UUID
		 * actionsWithUUID.get(i).get(1) = Action name ot Step name from old KB system
		*/

		if (scenarioWithActions) {
			// we generate XML file with references JSystem Actions
			for (int i = 0; i < actionsWithUUID.size(); i++) {
				data += String.format(
						"\t<target name=\"t%s\">\r\n" +
						"\t\t<jsystem showoutput=\"true\">\r\n" +
						"\t\t\t<sysproperty key=\"jsystem.uuid\" value=\"%s\"/>\r\n" +
						"\t\t\t<sysproperty key=\"jsystem.parent.uuid\" value=\"${jsystem.parent.uuid}.${jsystem.uuid}\"/>\r\n" +
						"\t\t\t<sysproperty key=\"jsystem.parent.name\" value=\"${jsystem.parent.name}.${ant.project.name}\"/>\r\n" +
						"\t\t\t<test name=\"automation.allot.com.Actions.KBsystem.General.%s\"/>\r\n" +
						"\t\t</jsystem>\r\n" +
						"\t</target>\r\n", i, actionsWithUUID.get(i).get(0), actionsWithUUID.get(i).get(1));
			}
		} else {
			// we generate XML file with references to XML files with JSystem Actions
			for (int i = 0; i < actionsWithUUID.size(); i++) {
				data += String.format(
						"\t<target name=\"t%s\">\n" +
						"\t\t<jsystem-ant antfile=\"${scenarios.base}/scenarios/SMP/Quality_Gates/Gate4/TODO/CORRECT/FILE_PATH/%s.xml\">\n" +
						"\t\t\t<property name=\"jsystem.uuid\" value=\"%s\"/>\n" +
						"\t\t\t<property name=\"jsystem.parent.uuid\" value=\"${jsystem.parent.uuid}.${jsystem.uuid}\"/>\n" +
						"\t\t\t<property name=\"jsystem.parent.name\" value=\"${jsystem.parent.name}.${ant.project.name}\"/>\n" +
						"\t\t</jsystem-ant>\n" +
						"\t</target>", i, actionsWithUUID.get(i).get(1), actionsWithUUID.get(i).get(0));
			}
		}

		// xml file last line
		data += XML_FOOTER;

		/*
		* save xml header
		* write data into file
		* filename = step name
		*/

		saveXMLFileName(filePath,fileName + ".xml", data);
	}

	public void savePropertiesFile(String filePath, String fileName, UUID uuid, HashMap<String, String> paramListWithValues) throws IOException {
		try {
			File directory = new File(filePath);
				if (!directory.exists()) {
					directory.mkdir();
			}
			BufferedWriter WriteFileBuffer = new BufferedWriter(new FileWriter(filePath+fileName, true));
			// iterate hashmap and write lines like:
			// uuid.paramName=param_value
			for (Entry<String, String> entry : paramListWithValues.entrySet()) {
			    String paramName = entry.getKey();
			    String paramValue = entry.getValue();

			    // replace old KB sign $${} with a new JSystem like > ${}
				paramValue = paramValue.replace("$${", "${");
			    String data = String.format("%s.%s=%s", uuid, paramName, paramValue);
			    WriteFileBuffer.write(data);
			    WriteFileBuffer.write(System.lineSeparator());
			}
			// write specific configuration line
			WriteFileBuffer.write(String.format("%s.jsystem.uisettings=sortSection\\:0;sortHeader\\:0;paramsOrder\\:defaultOrder;activeTab\\:0;headersRatio\\:0.1,0.25,0.05,0.2\n", uuid));
			WriteFileBuffer.close();
		} finally {
			log.info(String.format("File [%s] is updated", fileName));
		}
	}
	
	/**
	 * save data into Class file 
	 * @param fileName
	 * @param data
	 * @throws IOException
	 */
	public void saveXMLFileName(String filePath, String fileName, String data) throws IOException {
		try {
			File directory = new File(filePath);
			if (!directory.exists()) {
				directory.mkdir();
			}
			BufferedWriter WriteFileBuffer = new BufferedWriter(new FileWriter(filePath+fileName));
			WriteFileBuffer.write(data);
			WriteFileBuffer.close();
		} finally {
			log.info(String.format("XML FILE [%s] is saved", fileName));
		}
	}

	public Document getParserObject(String fileName) throws Exception {
		File xmlFile = new File(fileName);
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document xmlDocument = dBuilder.parse(xmlFile);

		return xmlDocument;
	}

	public void parseActions(Node node) throws Exception {
		NodeList list = node.getChildNodes();

		for (int i = 0; i < list.getLength(); i++) {
			Node childNode = list.item(i);
			String nodeText = childNode.getTextContent();
			String nodeName = childNode.getNodeName();

			switch (nodeName) {
				// scenarioName
				case "scenarioName":
					log.debug("test case >> [" + childNode.getTextContent() + "]");
					// check if that action is not in the list
					break;

				// step name
				case "keyBlockGroupName":
					log.debug("step >> " + childNode.getTextContent());
					break;
				// action name
				case "keyBlockName":
					log.debug("step action >> " + childNode.getTextContent());
					// check if that action is not in the list
					break;
				// params with values
				case "KeyBlockParam":
					Element element = (Element) childNode;
					for (int k = 0; k < element.getElementsByTagName("paramName").getLength(); k++) {
						// add a new param name
						log.debug("action param >> " + element.getElementsByTagName("paramName").item(k).getTextContent());
						log.debug("param value >> " + element.getElementsByTagName("paramValue").item(k).getTextContent());
					}
					break;
				case "KeyBlock":
					// generate properties files
//	  				 kbTestStepName = kbTestStepName.replaceAll("[^a-zA-Z0-9\\.\\-]", "_");
//					 savePropertiesFile("output2\\" + kbTestCaseName + "\\", kbTestStepName + ".properties", uuidForAction, paramListWithValues);
//					 generateJSystemScenario("output2\\" + kbTestCaseName + "\\", kbTestCaseName, testCaseStepsList, false);
//					generateJSystemScenario("output2\\" + kbTestCaseName + "\\", kbTestCaseName, testCaseStepsList, false);
			}
			parseActions(childNode);
		}
	}

//
//	public void parseActions(Node node) throws Exception {
//		try {
//			/* parse XML file structure */
//			File xmlFile = new File(this.fileName);
//
//			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
//			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
//			Document doc = dBuilder.parse(xmlFile);
//			doc.getDocumentElement().normalize();
//
//			// save test case and steps into variables
//			String kbTestCaseName = new String();
//			String kbTestStepName = new String();
//			UUID uuidForAction;
//			UUID uuidForScenario;
//
//			// get KeyBlockScenario
//			NodeList scenarios = doc.getElementsByTagName("KeyBlockTest");
//
//			for (int i = 0; i < scenarios.getLength(); i++ ) {
//				// get the list of child like scenarioName and etc....
//				NodeList testCase = scenarios.item(i).getChildNodes();
//
//				// iterate child items
//				for (int j = 0; j < testCase.getLength(); j++) {
//					Node testCaseName = testCase.item(j);
//
//					if (testCaseName.getNodeType() == Node.ELEMENT_NODE) {
//						// review each child
//						NodeList steps = testCaseName.getChildNodes();
//						ArrayList<ArrayList<String>> testCaseStepsList = new ArrayList<ArrayList<String>>();
//
//						for (int k = 0; k < steps.getLength(); k++) {
//							if (steps.item(k).getNodeType() == Node.ELEMENT_NODE) {
//								//node with elements
//								NodeList step = steps.item(k).getChildNodes();
//
//								for (int p = 0; p < step.getLength(); p++) {
//										NodeList stepName = step.item(p).getChildNodes();
//										// pack uuid + actionName into two dimension ArrayList
//										ArrayList<ArrayList<String>> uuidWithActions = new ArrayList<ArrayList<String>>();
//										ArrayList<String> uuidStepName = new ArrayList<String>();
//
//										if (step.item(p).getNodeName().equals("keyBlockGroupName")) {
//											// test case step
//											kbTestStepName = step.item(p).getTextContent();
//											// generate UUID for scenario
//											uuidForScenario = UUID.randomUUID();
//											// save uuid-ste name into array
//											uuidStepName.add(uuidForScenario.toString());
//											uuidStepName.add(kbTestStepName);
//											// save array into array
//											testCaseStepsList.add(uuidStepName);
//											log.debug(String.format("%s: %s-%s", kbTestCaseName, uuidForScenario, kbTestStepName));
//										}
//
//										// generate action file
//										for (int st = 0; st < stepName.getLength(); st++) {
//											// params with value
//											HashMap<String, String> paramListWithValues = new HashMap<String, String>();
//											String kbActionName = new String();
//											ArrayList<String> uuidRecord = new ArrayList<String>();
//											// generate UUID value and save action params into file with appropriate UUID
//											uuidForAction = UUID.randomUUID();
//
//											if (stepName.item(st).getNodeType() == Node.ELEMENT_NODE) {
//												NodeList params = stepName.item(st).getChildNodes();
//
//													for (int pst = 0; pst < params.getLength(); pst++) {
//														// get actionName
//														if (params.item(pst).getNodeName().equals("keyBlockName")) {
//															// action from the XML file
//															kbActionName = params.item(pst).getTextContent();
//														}
//
//														/* get actionName parameters */
//														if (params.item(pst).getNodeName().equals("keyBlockParams")) {
//															Element element = (Element) params.item(pst);
//
//															for (int elparam = 0; elparam < element.getElementsByTagName("paramName").getLength(); elparam++) {
//																paramListWithValues.put(element.getElementsByTagName("paramName").item(elparam).getTextContent(),
//																		element.getElementsByTagName("paramValue").item(elparam).getTextContent());
//															} //end of action element
//
//															if (!kbTestCaseName.equals("") && !kbTestStepName.equals("") && !kbActionName.equals("") && !paramListWithValues.isEmpty()) {
//																log.info("");
//																log.info(String.format("step case %s", kbTestCaseName));
//																log.info(String.format("step name %s", kbTestStepName));
//																log.info(String.format("action %s", kbActionName));
//																log.info(String.format("UUID %s", uuidForAction));
//																log.info(String.format("params and values %s", paramListWithValues));
//																log.info("");
//																uuidRecord.add(uuidForAction.toString());
//																uuidRecord.add(kbActionName);
//																uuidWithActions.add(uuidRecord);
//
//																// remove any trach signs from filename and folders
//																kbTestStepName = kbTestStepName.replaceAll("[^a-zA-Z0-9\\.\\-]", "_");
//
//
//																savePropertiesFile("output2\\" + kbTestCaseName + "\\", kbTestStepName + ".properties", uuidForAction, paramListWithValues);
//															}
//														} //end for params block
//													} //end for if
//											}
//
//											if (!uuidWithActions.isEmpty()) {
//												//log.debug(uuidWithActions);
//												generateJSystemScenario("output2\\" + kbTestCaseName + "\\", kbTestStepName, uuidWithActions, true);
//											}
//
//										} //end for step
//
//									} // end of for
//
//								//check chat we catch all steps from the test case
//								if (!testCaseStepsList.isEmpty()) {
//									generateJSystemScenario("output2\\" + kbTestCaseName + "\\", kbTestCaseName, testCaseStepsList, false);
//								}
//
//							}
//						} // end of for steps
//					} //end of test case
//				}
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//	}

	/**
	 * @param args
	 */
	public static void main(String[] args) throws Exception {
		String fileName = "PCRF_Basic.xml";

		Main xmlParser = new Main();

		log.info("Converter is started");
		log.info("Input XML file is : " + fileName);
		log.info("Get started with parseActions");

		Document xmlHierarchyDocument = xmlParser.getParserObject(fileName);
		xmlParser.parseActions(xmlHierarchyDocument);
	}
}